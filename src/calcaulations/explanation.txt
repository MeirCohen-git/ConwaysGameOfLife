The game of life is a cellular automaton devised by the British mathematician John Horton Conway in 1970.
The game is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. 
One interacts with the Game of Life by creating an initial configuration and obsevring how it evolves.
It is Turing complete and can simulate a universal constructor or any other Turing machine.

Math representation of the game of life:
Row is r.
Grid is g.
Cell is Xg (cell in g).
Theoretical neighbours are Yn(Xg). (each cell has exactly 8 neighbours).
Real (e for exist) neighbours are Ye(Xg). (Some cells have only 3 Real-neighbours like cell #1).
The Zy = sum of all Ye(Xg). (sum of all real neighbours values -> meaning how many of the real neighbours are alive).

To get from cell to is neighbours you need to add or subtract 1 row and add or subtract 1.
meaning: 
Y1 = Xg - (r - 1); -> from cell to top left neighbour.
Y2 = Xg - r; -> from cell to top neighbour.
Y3 = Xg - (r + 1); -> from cell to top right neighbour.
Y4 = Xg - 1; -> from cell to left neighbour.
Y5 = Xg + 1; -> from cell to right neighbour.
Y6 = Xg + (r - 1); -> from cell to bottom left neighbour.
Y7 = Xg + r; -> from cell to bottom neighbour.
Y8 = Xg + (r + 1); -> from cell to bottom right neighbour.

But in more simpllified way: Y1 = Xg - (r - 1) then Y2 = Y1 + 1.. but in Y4 it falls apart 
because Y4 = Xg - 1 and Y5 = Xg + 1 => so we need to update the formula to Y4 = Xg then again increment by 1
and finally on Y7 = Xg + (r - 1)

but it is not true logic because it can work only when the Xg - r = (-) and this is fail when Xg > r 
so we have to add a void zone around the grid.
to check if the cell is in the void zone or not.

//for the computing process:
so the iteration, current neighbour looks like this:
0, Yn = Xg - (r-1) 
1, Yn++
2, Yn++
3, Yn = Xg-1
4, Yn = Xg+1
5, Yn = Xg + (r-1)
6, Yn++ 
7, Yn++

for the computing process we need also to declare a void zone thats 'eats' the grid:
voidRow (vr) = (r+2); => voidGrid (vg) = vr * vr;

so in 3x3 grid we have 5x5 void:
v v v v v 
v g g g v
v g g g v
v g g g v 
v v v v v

x(1st) (first cell) is acctually located at vr + 2;
x(last) (last cell) is acctually located at ((vr - 1) vr) - 1;

(r >= 1) ^ (vr = r + 2) => (vr >= 3); (just simple logic)

(vr + 2) >= Xg <= ((vr - 1) vr) - 1; (another restriction that is true)

the ammount of void cells (Mv) is: (vr*vr) - r*r; 

Mv is always even because even when r is odd then when we subtract the r*r from vr*vr we get an even number.
so if Mv is always even (Mv % 2 == 0) and we know that our grid is inside our void.
we could say that those are the void cells:
    - start with vr cells has void
    - then do r times this procedure:
        -> add 1 cell to the void.
        -> jump r.
        -> then add 1 cell to the void.
    - finally add to the void vr  

restrictions:
X, Y = 0 v 1;
r, g, >= 1;
n = 8;
3 <= e <= 8;
0 <= Zy <= 8;
vr >= 3;
(vr + 2) >= Xg <= ((vr - 1) vr) - 1;
Mv = (vr*vr - r*r);
Mv % 2 == 0;



Rules for the game of life:
* Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.
* Any live cell with two or three live neighbours lives on to the next generation.
* Any live cell with more than three live neighbours dies, as if by overpopulation.
* Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

So to put it in a more math-like way:
2 >= Zy >= 3 => Xg = 0; 
Zy = 3 => Xg = 1;
Zy = 2 => Xg = Xg;

To compute the next generation of the game of life in the optimal way:
    - for all Yn(Xg) compute that => (0 <= Yn <= g) => Zy + Yn; (check if the Yn (neighbour) is Ye (real neighbour)); (Zy + Yn) // if Yn is 0 then it is not increment the Zy
    








